{"version":3,"sources":["modernizr.js"],"names":["window","document","undefined","is","obj","type","testRunner","featureNames","feature","aliasIdx","result","nameIdx","featureName","featureNameSplit","featureIdx","tests","hasOwnProperty","name","push","toLowerCase","options","aliases","length","fn","split","Modernizr","Boolean","classes","join","setClasses","className","docElement","classPrefix","_config","isSVG","baseVal","enableJSClass","reJS","RegExp","replace","enableClasses","addTest","test","key","hasOwnProp","last","_trigger","contains","str","substr","indexOf","createElement","arguments","createElementNS","call","apply","getBody","body","fake","injectElementWithStyles","rule","callback","nodes","testnames","style","ret","node","docOverflow","mod","div","parseInt","id","appendChild","styleSheet","cssText","createTextNode","background","overflow","parentNode","removeChild","offsetHeight","domToCSS","m1","computedStyle","elem","pseudo","prop","getComputedStyle","console","getPropertyValue","method","error","currentStyle","nativeTestProps","props","value","i","CSS","supports","conditionText","cssToDOM","m2","toUpperCase","testProps","prefixed","skipValueTest","cleanElems","afterInit","mStyle","modElem","propsLength","before","elems","shift","e","fnBind","that","testDOMProps","item","testPropsAll","ucProp","charAt","slice","cssomPrefixes","testAllProps","ModernizrProto","_version","usePrefixes","_q","on","cb","self","this","setTimeout","addAsyncTest","prototype","documentElement","nodeName","_hasOwnProperty","object","property","constructor","_l","res","cbs","addStyleSheet","ownerDocument","p","parent","getElementsByTagName","innerHTML","insertBefore","lastChild","firstChild","getElements","elements","html5","addElements","newElements","shivDocument","getExpandoData","data","expandoData","expando","expanID","supportsUnknownElements","cache","cloneNode","saveClones","createElem","canHaveChildren","reSkip","tagUrn","frag","createDocumentFragment","clone","l","shivMethods","createFrag","Function","shivCSS","supportsHtml5Styles","hasCSS","addWrappers","index","reElements","applyElement","createWrapper","element","attributes","wrapper","shivNamespace","specified","setAttribute","nodeValue","shivCssText","pair","parts","replacement","removeWrappers","wrappers","removeNode","shivPrint","removeSheet","clearTimeout","_removeSheetTimer","shivedSheet","namespaces","ownerWindow","parentWindow","supportsShivableSheets","printShived","add","attachEvent","imports","sheet","collection","styleSheets","sheets","Array","pop","disabled","reMedia","media","er","reverse","version","a","childNodes","docEl","module","exports","unshift","testProp","useValue","createSVGRect","bool","canPlayType","omPrefixes","_cssomPrefixes","domPrefixes","_domPrefixes","testStyles","diff","el","open"],"mappings":"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","file":"modernizr.min.js","sourcesContent":["/*!\n * modernizr v3.8.0\n * Build https://modernizr.com/download?-cssanimations-details-svg-video-addtest-printshiv-setclasses-testprop-dontmin\n *\n * Copyright (c)\n *  Faruk Ates\n *  Paul Irish\n *  Alex Sexton\n *  Ryan Seddon\n *  Patrick Kettner\n *  Stu Cox\n *  Richard Herrera\n *  Veeck\n\n * MIT License\n */\n\n/*\n * Modernizr tests which native CSS3 and HTML5 features are available in the\n * current UA and makes the results available to you in two ways: as properties on\n * a global `Modernizr` object, and as classes on the `<html>` element. This\n * information allows you to progressively enhance your pages with a granular level\n * of control over the experience.\n*/\n\n;(function(window, document, undefined){\n\n  var tests = [];\n  \n\n  /**\n   * ModernizrProto is the constructor for Modernizr\n   *\n   * @class\n   * @access public\n   */\n  var ModernizrProto = {\n    // The current version, dummy\n    _version: '3.8.0',\n\n    // Any settings that don't work as separate modules\n    // can go in here as configuration.\n    _config: {\n      'classPrefix': '',\n      'enableClasses': true,\n      'enableJSClass': true,\n      'usePrefixes': true\n    },\n\n    // Queue of tests\n    _q: [],\n\n    // Stub these for people who are listening\n    on: function(test, cb) {\n      // I don't really think people should do this, but we can\n      // safe guard it a bit.\n      // -- NOTE:: this gets WAY overridden in src/addTest for actual async tests.\n      // This is in case people listen to synchronous tests. I would leave it out,\n      // but the code to *disallow* sync tests in the real version of this\n      // function is actually larger than this.\n      var self = this;\n      setTimeout(function() {\n        cb(self[test]);\n      }, 0);\n    },\n\n    addTest: function(name, fn, options) {\n      tests.push({name: name, fn: fn, options: options});\n    },\n\n    addAsyncTest: function(fn) {\n      tests.push({name: null, fn: fn});\n    }\n  };\n\n  \n\n  // Fake some of Object.create so we can force non test results to be non \"own\" properties.\n  var Modernizr = function() {};\n  Modernizr.prototype = ModernizrProto;\n\n  // Leak modernizr globally when you `require` it rather than force it here.\n  // Overwrite name so constructor name is nicer :D\n  Modernizr = new Modernizr();\n\n  \n\n  var classes = [];\n  \n\n  /**\n   * is returns a boolean if the typeof an obj is exactly type.\n   *\n   * @access private\n   * @function is\n   * @param {*} obj - A thing we want to check the type of\n   * @param {string} type - A string to compare the typeof against\n   * @returns {boolean} true if the typeof the first parameter is exactly the specified type, false otherwise\n   */\n  function is(obj, type) {\n    return typeof obj === type;\n  }\n\n  ;\n\n  /**\n   * Run through all tests and detect their support in the current UA.\n   *\n   * @access private\n   * @returns {void}\n   */\n  function testRunner() {\n    var featureNames;\n    var feature;\n    var aliasIdx;\n    var result;\n    var nameIdx;\n    var featureName;\n    var featureNameSplit;\n\n    for (var featureIdx in tests) {\n      if (tests.hasOwnProperty(featureIdx)) {\n        featureNames = [];\n        feature = tests[featureIdx];\n        // run the test, throw the return value into the Modernizr,\n        // then based on that boolean, define an appropriate className\n        // and push it into an array of classes we'll join later.\n        //\n        // If there is no name, it's an 'async' test that is run,\n        // but not directly added to the object. That should\n        // be done with a post-run addTest call.\n        if (feature.name) {\n          featureNames.push(feature.name.toLowerCase());\n\n          if (feature.options && feature.options.aliases && feature.options.aliases.length) {\n            // Add all the aliases into the names list\n            for (aliasIdx = 0; aliasIdx < feature.options.aliases.length; aliasIdx++) {\n              featureNames.push(feature.options.aliases[aliasIdx].toLowerCase());\n            }\n          }\n        }\n\n        // Run the test, or use the raw value if it's not a function\n        result = is(feature.fn, 'function') ? feature.fn() : feature.fn;\n\n        // Set each of the names on the Modernizr object\n        for (nameIdx = 0; nameIdx < featureNames.length; nameIdx++) {\n          featureName = featureNames[nameIdx];\n          // Support dot properties as sub tests. We don't do checking to make sure\n          // that the implied parent tests have been added. You must call them in\n          // order (either in the test, or make the parent test a dependency).\n          //\n          // Cap it to TWO to make the logic simple and because who needs that kind of subtesting\n          // hashtag famous last words\n          featureNameSplit = featureName.split('.');\n\n          if (featureNameSplit.length === 1) {\n            Modernizr[featureNameSplit[0]] = result;\n          } else {\n            // cast to a Boolean, if not one already or if it doesnt exist yet (like inputtypes)\n            if (!Modernizr[featureNameSplit[0]] || Modernizr[featureNameSplit[0]] && !(Modernizr[featureNameSplit[0]] instanceof Boolean)) {\n              Modernizr[featureNameSplit[0]] = new Boolean(Modernizr[featureNameSplit[0]]);\n            }\n\n            Modernizr[featureNameSplit[0]][featureNameSplit[1]] = result;\n          }\n\n          classes.push((result ? '' : 'no-') + featureNameSplit.join('-'));\n        }\n      }\n    }\n  }\n  ;\n\n  /**\n   * docElement is a convenience wrapper to grab the root element of the document\n   *\n   * @access private\n   * @returns {HTMLElement|SVGElement} The root element of the document\n   */\n  var docElement = document.documentElement;\n  \n\n  /**\n   * A convenience helper to check if the document we are running in is an SVG document\n   *\n   * @access private\n   * @returns {boolean}\n   */\n  var isSVG = docElement.nodeName.toLowerCase() === 'svg';\n\n  \n\n  /**\n   * setClasses takes an array of class names and adds them to the root element\n   *\n   * @access private\n   * @function setClasses\n   * @param {string[]} classes - Array of class names\n   */\n  // Pass in an and array of class names, e.g.:\n  //  ['no-webp', 'borderradius', ...]\n  function setClasses(classes) {\n    var className = docElement.className;\n    var classPrefix = Modernizr._config.classPrefix || '';\n\n    if (isSVG) {\n      className = className.baseVal;\n    }\n\n    // Change `no-js` to `js` (independently of the `enableClasses` option)\n    // Handle classPrefix on this too\n    if (Modernizr._config.enableJSClass) {\n      var reJS = new RegExp('(^|\\\\s)' + classPrefix + 'no-js(\\\\s|$)');\n      className = className.replace(reJS, '$1' + classPrefix + 'js$2');\n    }\n\n    if (Modernizr._config.enableClasses) {\n      // Add the new classes\n      if (classes.length > 0) {\n        className += ' ' + classPrefix + classes.join(' ' + classPrefix);\n      }\n      if (isSVG) {\n        docElement.className.baseVal = className;\n      } else {\n        docElement.className = className;\n      }\n    }\n  }\n\n  ;\n\n  /**\n   * hasOwnProp is a shim for hasOwnProperty that is needed for Safari 2.0 support\n   *\n   * @author kangax\n   * @access private\n   * @function hasOwnProp\n   * @param {object} object - The object to check for a property\n   * @param {string} property - The property to check for\n   * @returns {boolean}\n   */\n\n  // hasOwnProperty shim by kangax needed for Safari 2.0 support\n  var hasOwnProp;\n\n  (function() {\n    var _hasOwnProperty = ({}).hasOwnProperty;\n    /* istanbul ignore else */\n    /* we have no way of testing IE 5.5 or safari 2,\n     * so just assume the else gets hit */\n    if (!is(_hasOwnProperty, 'undefined') && !is(_hasOwnProperty.call, 'undefined')) {\n      hasOwnProp = function(object, property) {\n        return _hasOwnProperty.call(object, property);\n      };\n    }\n    else {\n      hasOwnProp = function(object, property) { /* yes, this can give false positives/negatives, but most of the time we don't care about those */\n        return ((property in object) && is(object.constructor.prototype[property], 'undefined'));\n      };\n    }\n  })();\n\n  \n\n\n  // _l tracks listeners for async tests, as well as tests that execute after the initial run\n  ModernizrProto._l = {};\n\n  /**\n   * Modernizr.on is a way to listen for the completion of async tests. Being\n   * asynchronous, they may not finish before your scripts run. As a result you\n   * will get a possibly false negative `undefined` value.\n   *\n   * @memberOf Modernizr\n   * @name Modernizr.on\n   * @access public\n   * @function on\n   * @param {string} feature - String name of the feature detect\n   * @param {Function} cb - Callback function returning a Boolean - true if feature is supported, false if not\n   * @returns {void}\n   * @example\n   *\n   * ```js\n   * Modernizr.on('flash', function( result ) {\n   *   if (result) {\n   *    // the browser has flash\n   *   } else {\n   *     // the browser does not have flash\n   *   }\n   * });\n   * ```\n   */\n  ModernizrProto.on = function(feature, cb) {\n    // Create the list of listeners if it doesn't exist\n    if (!this._l[feature]) {\n      this._l[feature] = [];\n    }\n\n    // Push this test on to the listener list\n    this._l[feature].push(cb);\n\n    // If it's already been resolved, trigger it on next tick\n    if (Modernizr.hasOwnProperty(feature)) {\n      // Next Tick\n      setTimeout(function() {\n        Modernizr._trigger(feature, Modernizr[feature]);\n      }, 0);\n    }\n  };\n\n  /**\n   * _trigger is the private function used to signal test completion and run any\n   * callbacks registered through [Modernizr.on](#modernizr-on)\n   *\n   * @memberOf Modernizr\n   * @name Modernizr._trigger\n   * @access private\n   * @function _trigger\n   * @param {string} feature - string name of the feature detect\n   * @param {Function|boolean} [res] - A feature detection function, or the boolean =\n   * result of a feature detection function\n   * @returns {void}\n   */\n  ModernizrProto._trigger = function(feature, res) {\n    if (!this._l[feature]) {\n      return;\n    }\n\n    var cbs = this._l[feature];\n\n    // Force async\n    setTimeout(function() {\n      var i, cb;\n      for (i = 0; i < cbs.length; i++) {\n        cb = cbs[i];\n        cb(res);\n      }\n    }, 0);\n\n    // Don't trigger these again\n    delete this._l[feature];\n  };\n\n  /**\n   * addTest allows you to define your own feature detects that are not currently\n   * included in Modernizr (under the covers it's the exact same code Modernizr\n   * uses for its own [feature detections](https://github.com/Modernizr/Modernizr/tree/master/feature-detects)).\n   * Just like the official detects, the result\n   * will be added onto the Modernizr object, as well as an appropriate className set on\n   * the html element when configured to do so\n   *\n   * @memberOf Modernizr\n   * @name Modernizr.addTest\n   * @optionName Modernizr.addTest()\n   * @optionProp addTest\n   * @access public\n   * @function addTest\n   * @param {string|Object} feature - The string name of the feature detect, or an\n   * object of feature detect names and test\n   * @param {Function|boolean} test - Function returning true if feature is supported,\n   * false if not. Otherwise a boolean representing the results of a feature detection\n   * @returns {Object} the Modernizr object to allow chaining\n   * @example\n   *\n   * The most common way of creating your own feature detects is by calling\n   * `Modernizr.addTest` with a string (preferably just lowercase, without any\n   * punctuation), and a function you want executed that will return a boolean result\n   *\n   * ```js\n   * Modernizr.addTest('itsTuesday', function() {\n   *  var d = new Date();\n   *  return d.getDay() === 2;\n   * });\n   * ```\n   *\n   * When the above is run, it will set Modernizr.itstuesday to `true` when it is tuesday,\n   * and to `false` every other day of the week. One thing to notice is that the names of\n   * feature detect functions are always lowercased when added to the Modernizr object. That\n   * means that `Modernizr.itsTuesday` will not exist, but `Modernizr.itstuesday` will.\n   *\n   *\n   *  Since we only look at the returned value from any feature detection function,\n   *  you do not need to actually use a function. For simple detections, just passing\n   *  in a statement that will return a boolean value works just fine.\n   *\n   * ```js\n   * Modernizr.addTest('hasjquery', 'jQuery' in window);\n   * ```\n   *\n   * Just like before, when the above runs `Modernizr.hasjquery` will be true if\n   * jQuery has been included on the page. Not using a function saves a small amount\n   * of overhead for the browser, as well as making your code much more readable.\n   *\n   * Finally, you also have the ability to pass in an object of feature names and\n   * their tests. This is handy if you want to add multiple detections in one go.\n   * The keys should always be a string, and the value can be either a boolean or\n   * function that returns a boolean.\n   *\n   * ```js\n   * var detects = {\n   *  'hasjquery': 'jQuery' in window,\n   *  'itstuesday': function() {\n   *    var d = new Date();\n   *    return d.getDay() === 2;\n   *  }\n   * }\n   *\n   * Modernizr.addTest(detects);\n   * ```\n   *\n   * There is really no difference between the first methods and this one, it is\n   * just a convenience to let you write more readable code.\n   */\n  function addTest(feature, test) {\n\n    if (typeof feature === 'object') {\n      for (var key in feature) {\n        if (hasOwnProp(feature, key)) {\n          addTest(key, feature[ key ]);\n        }\n      }\n    } else {\n\n      feature = feature.toLowerCase();\n      var featureNameSplit = feature.split('.');\n      var last = Modernizr[featureNameSplit[0]];\n\n      // Again, we don't check for parent test existence. Get that right, though.\n      if (featureNameSplit.length === 2) {\n        last = last[featureNameSplit[1]];\n      }\n\n      if (typeof last !== 'undefined') {\n        // we're going to quit if you're trying to overwrite an existing test\n        // if we were to allow it, we'd do this:\n        //   var re = new RegExp(\"\\\\b(no-)?\" + feature + \"\\\\b\");\n        //   docElement.className = docElement.className.replace( re, '' );\n        // but, no rly, stuff 'em.\n        return Modernizr;\n      }\n\n      test = typeof test === 'function' ? test() : test;\n\n      // Set the value (this is the magic, right here).\n      if (featureNameSplit.length === 1) {\n        Modernizr[featureNameSplit[0]] = test;\n      } else {\n        // cast to a Boolean, if not one already\n        if (Modernizr[featureNameSplit[0]] && !(Modernizr[featureNameSplit[0]] instanceof Boolean)) {\n          Modernizr[featureNameSplit[0]] = new Boolean(Modernizr[featureNameSplit[0]]);\n        }\n\n        Modernizr[featureNameSplit[0]][featureNameSplit[1]] = test;\n      }\n\n      // Set a single class (either `feature` or `no-feature`)\n      setClasses([(!!test && test !== false ? '' : 'no-') + featureNameSplit.join('-')]);\n\n      // Trigger the event\n      Modernizr._trigger(feature, test);\n    }\n\n    return Modernizr; // allow chaining.\n  }\n\n  // After all the tests are run, add self to the Modernizr prototype\n  Modernizr._q.push(function() {\n    ModernizrProto.addTest = addTest;\n  });\n\n  \n\n\n  /**\n   * @optionName html5printshiv\n   * @optionProp html5printshiv\n   */\n\n  // Take the html5 variable out of the html5shiv scope so we can return it.\n  var html5;\n  if (!isSVG) {\n    /**\n     * @preserve HTML5 Shiv 3.7.3 | @afarkas @jdalton @jon_neal @rem | MIT/GPL2 Licensed\n     */\n    ;(function(window, document) {\n      /*jshint evil:true */\n      /** version */\n      var version = '3.7.3';\n\n      /** Preset options */\n      var options = window.html5 || {};\n\n      /** Used to skip problem elements */\n      var reSkip = /^<|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i;\n\n      /** Not all elements can be cloned in IE **/\n      var saveClones = /^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i;\n\n      /** Detect whether the browser supports default html5 styles */\n      var supportsHtml5Styles;\n\n      /** Name of the expando, to work with multiple documents or to re-shiv one document */\n      var expando = '_html5shiv';\n\n      /** The id for the the documents expando */\n      var expanID = 0;\n\n      /** Cached data for each document */\n      var expandoData = {};\n\n      /** Detect whether the browser supports unknown elements */\n      var supportsUnknownElements;\n\n      (function() {\n        try {\n          var a = document.createElement('a');\n          a.innerHTML = '<xyz></xyz>';\n          //if the hidden property is implemented we can assume, that the browser supports basic HTML5 Styles\n          supportsHtml5Styles = ('hidden' in a);\n\n          supportsUnknownElements = a.childNodes.length == 1 || (function() {\n            // assign a false positive if unable to shiv\n            (document.createElement)('a');\n            var frag = document.createDocumentFragment();\n            return (\n              typeof frag.cloneNode == 'undefined' ||\n              typeof frag.createDocumentFragment == 'undefined' ||\n              typeof frag.createElement == 'undefined'\n            );\n          }());\n        } catch(e) {\n          // assign a false positive if detection fails => unable to shiv\n          supportsHtml5Styles = true;\n          supportsUnknownElements = true;\n        }\n\n      }());\n\n      /*--------------------------------------------------------------------------*/\n\n      /**\n       * Creates a style sheet with the given CSS text and adds it to the document.\n       * @private\n       * @param {Document} ownerDocument The document.\n       * @param {String} cssText The CSS text.\n       * @returns {StyleSheet} The style element.\n       */\n      function addStyleSheet(ownerDocument, cssText) {\n        var p = ownerDocument.createElement('p'),\n          parent = ownerDocument.getElementsByTagName('head')[0] || ownerDocument.documentElement;\n\n        p.innerHTML = 'x<style>' + cssText + '</style>';\n        return parent.insertBefore(p.lastChild, parent.firstChild);\n      }\n\n      /**\n       * Returns the value of `html5.elements` as an array.\n       * @private\n       * @returns {Array} An array of shived element node names.\n       */\n      function getElements() {\n        var elements = html5.elements;\n        return typeof elements == 'string' ? elements.split(' ') : elements;\n      }\n\n      /**\n       * Extends the built-in list of html5 elements\n       * @memberOf html5\n       * @param {String|Array} newElements whitespace separated list or array of new element names to shiv\n       * @param {Document} ownerDocument The context document.\n       */\n      function addElements(newElements, ownerDocument) {\n        var elements = html5.elements;\n        if(typeof elements != 'string'){\n          elements = elements.join(' ');\n        }\n        if(typeof newElements != 'string'){\n          newElements = newElements.join(' ');\n        }\n        html5.elements = elements +' '+ newElements;\n        shivDocument(ownerDocument);\n      }\n\n      /**\n       * Returns the data associated to the given document\n       * @private\n       * @param {Document} ownerDocument The document.\n       * @returns {Object} An object of data.\n       */\n      function getExpandoData(ownerDocument) {\n        var data = expandoData[ownerDocument[expando]];\n        if (!data) {\n          data = {};\n          expanID++;\n          ownerDocument[expando] = expanID;\n          expandoData[expanID] = data;\n        }\n        return data;\n      }\n\n      /**\n       * returns a shived element for the given nodeName and document\n       * @memberOf html5\n       * @param {String} nodeName name of the element\n       * @param {Document} ownerDocument The context document.\n       * @returns {Object} The shived element.\n       */\n      function createElement(nodeName, ownerDocument, data){\n        if (!ownerDocument) {\n          ownerDocument = document;\n        }\n        if(supportsUnknownElements){\n          return ownerDocument.createElement(nodeName);\n        }\n        if (!data) {\n          data = getExpandoData(ownerDocument);\n        }\n        var node;\n\n        if (data.cache[nodeName]) {\n          node = data.cache[nodeName].cloneNode();\n        } else if (saveClones.test(nodeName)) {\n          node = (data.cache[nodeName] = data.createElem(nodeName)).cloneNode();\n        } else {\n          node = data.createElem(nodeName);\n        }\n\n        // Avoid adding some elements to fragments in IE < 9 because\n        // * Attributes like `name` or `type` cannot be set/changed once an element\n        //   is inserted into a document/fragment\n        // * Link elements with `src` attributes that are inaccessible, as with\n        //   a 403 response, will cause the tab/window to crash\n        // * Script elements appended to fragments will execute when their `src`\n        //   or `text` property is set\n        return node.canHaveChildren && !reSkip.test(nodeName) && !node.tagUrn ? data.frag.appendChild(node) : node;\n      }\n\n      /**\n       * returns a shived DocumentFragment for the given document\n       * @memberOf html5\n       * @param {Document} ownerDocument The context document.\n       * @returns {Object} The shived DocumentFragment.\n       */\n      function createDocumentFragment(ownerDocument, data){\n        if (!ownerDocument) {\n          ownerDocument = document;\n        }\n        if(supportsUnknownElements){\n          return ownerDocument.createDocumentFragment();\n        }\n        data = data || getExpandoData(ownerDocument);\n        var clone = data.frag.cloneNode(),\n          i = 0,\n          elems = getElements(),\n          l = elems.length;\n        for(;i<l;i++){\n          clone.createElement(elems[i]);\n        }\n        return clone;\n      }\n\n      /**\n       * Shivs the `createElement` and `createDocumentFragment` methods of the document.\n       * @private\n       * @param {Document|DocumentFragment} ownerDocument The document.\n       * @param {Object} data of the document.\n       */\n      function shivMethods(ownerDocument, data) {\n        if (!data.cache) {\n          data.cache = {};\n          data.createElem = ownerDocument.createElement;\n          data.createFrag = ownerDocument.createDocumentFragment;\n          data.frag = data.createFrag();\n        }\n\n\n        ownerDocument.createElement = function(nodeName) {\n          //abort shiv\n          if (!html5.shivMethods) {\n            return data.createElem(nodeName);\n          }\n          return createElement(nodeName, ownerDocument, data);\n        };\n\n        ownerDocument.createDocumentFragment = Function('h,f', 'return function(){' +\n          'var n=f.cloneNode(),c=n.createElement;' +\n          'h.shivMethods&&(' +\n          // unroll the `createElement` calls\n          getElements().join().replace(/[\\w\\-:]+/g, function(nodeName) {\n            data.createElem(nodeName);\n            data.frag.createElement(nodeName);\n            return 'c(\"' + nodeName + '\")';\n          }) +\n          ');return n}'\n        )(html5, data.frag);\n      }\n\n      /*--------------------------------------------------------------------------*/\n\n      /**\n       * Shivs the given document.\n       * @memberOf html5\n       * @param {Document} ownerDocument The document to shiv.\n       * @returns {Document} The shived document.\n       */\n      function shivDocument(ownerDocument) {\n        if (!ownerDocument) {\n          ownerDocument = document;\n        }\n        var data = getExpandoData(ownerDocument);\n\n        if (html5.shivCSS && !supportsHtml5Styles && !data.hasCSS) {\n          data.hasCSS = !!addStyleSheet(ownerDocument,\n            // corrects block display not defined in IE6/7/8/9\n            'article,aside,dialog,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}' +\n            // adds styling not present in IE6/7/8/9\n            'mark{background:#FF0;color:#000}' +\n            // hides non-rendered elements\n            'template{display:none}'\n          );\n        }\n        if (!supportsUnknownElements) {\n          shivMethods(ownerDocument, data);\n        }\n        return ownerDocument;\n      }\n\n      /*--------------------------------------------------------------------------*/\n\n      /**\n       * The `html5` object is exposed so that more elements can be shived and\n       * existing shiving can be detected on iframes.\n       * @type Object\n       * @example\n       *\n       * // options can be changed before the script is included\n       * html5 = { 'elements': 'mark section', 'shivCSS': false, 'shivMethods': false };\n       */\n      var html5 = {\n\n        /**\n         * An array or space separated string of node names of the elements to shiv.\n         * @memberOf html5\n         * @type Array|String\n         */\n        'elements': options.elements || 'abbr article aside audio bdi canvas data datalist details dialog figcaption figure footer header hgroup main mark meter nav output picture progress section summary template time video',\n\n        /**\n         * current version of html5shiv\n         */\n        'version': version,\n\n        /**\n         * A flag to indicate that the HTML5 style sheet should be inserted.\n         * @memberOf html5\n         * @type Boolean\n         */\n        'shivCSS': (options.shivCSS !== false),\n\n        /**\n         * Is equal to true if a browser supports creating unknown/HTML5 elements\n         * @memberOf html5\n         * @type boolean\n         */\n        'supportsUnknownElements': supportsUnknownElements,\n\n        /**\n         * A flag to indicate that the document's `createElement` and `createDocumentFragment`\n         * methods should be overwritten.\n         * @memberOf html5\n         * @type Boolean\n         */\n        'shivMethods': (options.shivMethods !== false),\n\n        /**\n         * A string to describe the type of `html5` object (\"default\" or \"default print\").\n         * @memberOf html5\n         * @type String\n         */\n        'type': 'default',\n\n        // shivs the document according to the specified `html5` object options\n        'shivDocument': shivDocument,\n\n        //creates a shived element\n        createElement: createElement,\n\n        //creates a shived documentFragment\n        createDocumentFragment: createDocumentFragment,\n\n        //extends list of elements\n        addElements: addElements\n      };\n\n      /*--------------------------------------------------------------------------*/\n\n      // expose html5\n      window.html5 = html5;\n\n      // shiv the document\n      shivDocument(document);\n\n      /*------------------------------- Print Shiv -------------------------------*/\n\n      /** Used to filter media types */\n      var reMedia = /^$|\\b(?:all|print)\\b/;\n\n      /** Used to namespace printable elements */\n      var shivNamespace = 'html5shiv';\n\n      /** Detect whether the browser supports shivable style sheets */\n      var supportsShivableSheets = !supportsUnknownElements && (function() {\n        // assign a false negative if unable to shiv\n        var docEl = document.documentElement;\n        return !(\n          typeof document.namespaces == 'undefined' ||\n          typeof document.parentWindow == 'undefined' ||\n          typeof docEl.applyElement == 'undefined' ||\n          typeof docEl.removeNode == 'undefined' ||\n          typeof window.attachEvent == 'undefined'\n        );\n      }());\n\n      /*--------------------------------------------------------------------------*/\n\n      /**\n       * Wraps all HTML5 elements in the given document with printable elements.\n       * (eg. the \"header\" element is wrapped with the \"html5shiv:header\" element)\n       * @private\n       * @param {Document} ownerDocument The document.\n       * @returns {Array} An array wrappers added.\n       */\n      function addWrappers(ownerDocument) {\n        var node,\n          nodes = ownerDocument.getElementsByTagName('*'),\n          index = nodes.length,\n          reElements = RegExp('^(?:' + getElements().join('|') + ')$', 'i'),\n          result = [];\n\n        while (index--) {\n          node = nodes[index];\n          if (reElements.test(node.nodeName)) {\n            result.push(node.applyElement(createWrapper(node)));\n          }\n        }\n        return result;\n      }\n\n      /**\n       * Creates a printable wrapper for the given element.\n       * @private\n       * @param {Element} element The element.\n       * @returns {Element} The wrapper.\n       */\n      function createWrapper(element) {\n        var node,\n          nodes = element.attributes,\n          index = nodes.length,\n          wrapper = element.ownerDocument.createElement(shivNamespace + ':' + element.nodeName);\n\n        // copy element attributes to the wrapper\n        while (index--) {\n          node = nodes[index];\n          node.specified && wrapper.setAttribute(node.nodeName, node.nodeValue);\n        }\n        // copy element styles to the wrapper\n        wrapper.style.cssText = element.style.cssText;\n        return wrapper;\n      }\n\n      /**\n       * Shivs the given CSS text.\n       * (eg. header{} becomes html5shiv\\:header{})\n       * @private\n       * @param {String} cssText The CSS text to shiv.\n       * @returns {String} The shived CSS text.\n       */\n      function shivCssText(cssText) {\n        var pair,\n          parts = cssText.split('{'),\n          index = parts.length,\n          reElements = RegExp('(^|[\\\\s,>+~])(' + getElements().join('|') + ')(?=[[\\\\s,>+~#.:]|$)', 'gi'),\n          replacement = '$1' + shivNamespace + '\\\\:$2';\n\n        while (index--) {\n          pair = parts[index] = parts[index].split('}');\n          pair[pair.length - 1] = pair[pair.length - 1].replace(reElements, replacement);\n          parts[index] = pair.join('}');\n        }\n        return parts.join('{');\n      }\n\n      /**\n       * Removes the given wrappers, leaving the original elements.\n       * @private\n       * @params {Array} wrappers An array of printable wrappers.\n       */\n      function removeWrappers(wrappers) {\n        var index = wrappers.length;\n        while (index--) {\n          wrappers[index].removeNode();\n        }\n      }\n\n      /*--------------------------------------------------------------------------*/\n\n      /**\n       * Shivs the given document for print.\n       * @memberOf html5\n       * @param {Document} ownerDocument The document to shiv.\n       * @returns {Document} The shived document.\n       */\n      function shivPrint(ownerDocument) {\n        var shivedSheet,\n          wrappers,\n          data = getExpandoData(ownerDocument),\n          namespaces = ownerDocument.namespaces,\n          ownerWindow = ownerDocument.parentWindow;\n\n        if (!supportsShivableSheets || ownerDocument.printShived) {\n          return ownerDocument;\n        }\n        if (typeof namespaces[shivNamespace] == 'undefined') {\n          namespaces.add(shivNamespace);\n        }\n\n        function removeSheet() {\n          clearTimeout(data._removeSheetTimer);\n          if (shivedSheet) {\n            shivedSheet.removeNode(true);\n          }\n          shivedSheet= null;\n        }\n\n        ownerWindow.attachEvent('onbeforeprint', function() {\n\n          removeSheet();\n\n          var imports,\n            length,\n            sheet,\n            collection = ownerDocument.styleSheets,\n            cssText = [],\n            index = collection.length,\n            sheets = Array(index);\n\n          // convert styleSheets collection to an array\n          while (index--) {\n            sheets[index] = collection[index];\n          }\n          // concat all style sheet CSS text\n          while ((sheet = sheets.pop())) {\n            // IE does not enforce a same origin policy for external style sheets...\n            // but has trouble with some dynamically created stylesheets\n            if (!sheet.disabled && reMedia.test(sheet.media)) {\n\n              try {\n                imports = sheet.imports;\n                length = imports.length;\n              } catch(er){\n                length = 0;\n              }\n\n              for (index = 0; index < length; index++) {\n                sheets.push(imports[index]);\n              }\n\n              try {\n                cssText.push(sheet.cssText);\n              } catch(er){}\n            }\n          }\n\n          // wrap all HTML5 elements with printable elements and add the shived style sheet\n          cssText = shivCssText(cssText.reverse().join(''));\n          wrappers = addWrappers(ownerDocument);\n          shivedSheet = addStyleSheet(ownerDocument, cssText);\n\n        });\n\n        ownerWindow.attachEvent('onafterprint', function() {\n          // remove wrappers, leaving the original elements, and remove the shived style sheet\n          removeWrappers(wrappers);\n          clearTimeout(data._removeSheetTimer);\n          data._removeSheetTimer = setTimeout(removeSheet, 500);\n        });\n\n        ownerDocument.printShived = true;\n        return ownerDocument;\n      }\n\n      /*--------------------------------------------------------------------------*/\n\n      // expose API\n      html5.type += ' print';\n      html5.shivPrint = shivPrint;\n\n      // shiv for print\n      shivPrint(document);\n\n      if(typeof module == 'object' && module.exports){\n        module.exports = html5;\n      }\n\n    }(typeof window !== \"undefined\" ? window : this, document));\n  }\n\n  ;\n\n  /**\n   * contains checks to see if a string contains another string\n   *\n   * @access private\n   * @function contains\n   * @param {string} str - The string we want to check for substrings\n   * @param {string} substr - The substring we want to search the first string for\n   * @returns {boolean} true if and only if the first string 'str' contains the second string 'substr'\n   */\n  function contains(str, substr) {\n    return !!~('' + str).indexOf(substr);\n  }\n\n  ;\n\n  /**\n   * createElement is a convenience wrapper around document.createElement. Since we\n   * use createElement all over the place, this allows for (slightly) smaller code\n   * as well as abstracting away issues with creating elements in contexts other than\n   * HTML documents (e.g. SVG documents).\n   *\n   * @access private\n   * @function createElement\n   * @returns {HTMLElement|SVGElement} An HTML or SVG element\n   */\n  function createElement() {\n    if (typeof document.createElement !== 'function') {\n      // This is the case in IE7, where the type of createElement is \"object\".\n      // For this reason, we cannot call apply() as Object is not a Function.\n      return document.createElement(arguments[0]);\n    } else if (isSVG) {\n      return document.createElementNS.call(document, 'http://www.w3.org/2000/svg', arguments[0]);\n    } else {\n      return document.createElement.apply(document, arguments);\n    }\n  }\n\n  ;\n\n  /**\n   * Create our \"modernizr\" element that we do most feature tests on.\n   *\n   * @access private\n   */\n  var modElem = {\n    elem: createElement('modernizr')\n  };\n\n  // Clean up this element\n  Modernizr._q.push(function() {\n    delete modElem.elem;\n  });\n\n  \n\n  var mStyle = {\n    style: modElem.elem.style\n  };\n\n  // kill ref for gc, must happen before mod.elem is removed, so we unshift on to\n  // the front of the queue.\n  Modernizr._q.unshift(function() {\n    delete mStyle.style;\n  });\n\n  \n\n  /**\n   * getBody returns the body of a document, or an element that can stand in for\n   * the body if a real body does not exist\n   *\n   * @access private\n   * @function getBody\n   * @returns {HTMLElement|SVGElement} Returns the real body of a document, or an\n   * artificially created element that stands in for the body\n   */\n  function getBody() {\n    // After page load injecting a fake body doesn't work so check if body exists\n    var body = document.body;\n\n    if (!body) {\n      // Can't use the real body create a fake one.\n      body = createElement(isSVG ? 'svg' : 'body');\n      body.fake = true;\n    }\n\n    return body;\n  }\n\n  ;\n\n  /**\n   * injectElementWithStyles injects an element with style element and some CSS rules\n   *\n   * @access private\n   * @function injectElementWithStyles\n   * @param {string} rule - String representing a css rule\n   * @param {Function} callback - A function that is used to test the injected element\n   * @param {number} [nodes] - An integer representing the number of additional nodes you want injected\n   * @param {string[]} [testnames] - An array of strings that are used as ids for the additional nodes\n   * @returns {boolean} the result of the specified callback test\n   */\n  function injectElementWithStyles(rule, callback, nodes, testnames) {\n    var mod = 'modernizr';\n    var style;\n    var ret;\n    var node;\n    var docOverflow;\n    var div = createElement('div');\n    var body = getBody();\n\n    if (parseInt(nodes, 10)) {\n      // In order not to give false positives we create a node for each test\n      // This also allows the method to scale for unspecified uses\n      while (nodes--) {\n        node = createElement('div');\n        node.id = testnames ? testnames[nodes] : mod + (nodes + 1);\n        div.appendChild(node);\n      }\n    }\n\n    style = createElement('style');\n    style.type = 'text/css';\n    style.id = 's' + mod;\n\n    // IE6 will false positive on some tests due to the style element inside the test div somehow interfering offsetHeight, so insert it into body or fakebody.\n    // Opera will act all quirky when injecting elements in documentElement when page is served as xml, needs fakebody too. #270\n    (!body.fake ? div : body).appendChild(style);\n    body.appendChild(div);\n\n    if (style.styleSheet) {\n      style.styleSheet.cssText = rule;\n    } else {\n      style.appendChild(document.createTextNode(rule));\n    }\n    div.id = mod;\n\n    if (body.fake) {\n      //avoid crashing IE8, if background image is used\n      body.style.background = '';\n      //Safari 5.13/5.1.4 OSX stops loading if ::-webkit-scrollbar is used and scrollbars are visible\n      body.style.overflow = 'hidden';\n      docOverflow = docElement.style.overflow;\n      docElement.style.overflow = 'hidden';\n      docElement.appendChild(body);\n    }\n\n    ret = callback(div, rule);\n    // If this is done after page load we don't want to remove the body so check if body exists\n    if (body.fake) {\n      body.parentNode.removeChild(body);\n      docElement.style.overflow = docOverflow;\n      // Trigger layout so kinetic scrolling isn't disabled in iOS6+\n      // eslint-disable-next-line\n      docElement.offsetHeight;\n    } else {\n      div.parentNode.removeChild(div);\n    }\n\n    return !!ret;\n  }\n\n  ;\n\n  /**\n   * domToCSS takes a camelCase string and converts it to kebab-case\n   * e.g. boxSizing -> box-sizing\n   *\n   * @access private\n   * @function domToCSS\n   * @param {string} name - String name of camelCase prop we want to convert\n   * @returns {string} The kebab-case version of the supplied name\n   */\n  function domToCSS(name) {\n    return name.replace(/([A-Z])/g, function(str, m1) {\n      return '-' + m1.toLowerCase();\n    }).replace(/^ms-/, '-ms-');\n  }\n\n  ;\n\n\n  /**\n   * wrapper around getComputedStyle, to fix issues with Firefox returning null when\n   * called inside of a hidden iframe\n   *\n   * @access private\n   * @function computedStyle\n   * @param {HTMLElement|SVGElement} elem - The element we want to find the computed styles of\n   * @param {string|null} [pseudo] - An optional pseudo element selector (e.g. :before), of null if none\n   * @param {string} prop - A CSS property\n   * @returns {CSSStyleDeclaration} the value of the specified CSS property\n   */\n  function computedStyle(elem, pseudo, prop) {\n    var result;\n\n    if ('getComputedStyle' in window) {\n      result = getComputedStyle.call(window, elem, pseudo);\n      var console = window.console;\n\n      if (result !== null) {\n        if (prop) {\n          result = result.getPropertyValue(prop);\n        }\n      } else {\n        if (console) {\n          var method = console.error ? 'error' : 'log';\n          console[method].call(console, 'getComputedStyle returning null, its possible modernizr test results are inaccurate');\n        }\n      }\n    } else {\n      result = !pseudo && elem.currentStyle && elem.currentStyle[prop];\n    }\n\n    return result;\n  }\n\n  ;\n\n  /**\n   * nativeTestProps allows for us to use native feature detection functionality if available.\n   * some prefixed form, or false, in the case of an unsupported rule\n   *\n   * @access private\n   * @function nativeTestProps\n   * @param {array} props - An array of property names\n   * @param {string} value - A string representing the value we want to check via @supports\n   * @returns {boolean|undefined} A boolean when @supports exists, undefined otherwise\n   */\n  // Accepts a list of property names and a single value\n  // Returns `undefined` if native detection not available\n  function nativeTestProps(props, value) {\n    var i = props.length;\n    // Start with the JS API: https://www.w3.org/TR/css3-conditional/#the-css-interface\n    if ('CSS' in window && 'supports' in window.CSS) {\n      // Try every prefixed variant of the property\n      while (i--) {\n        if (window.CSS.supports(domToCSS(props[i]), value)) {\n          return true;\n        }\n      }\n      return false;\n    }\n    // Otherwise fall back to at-rule (for Opera 12.x)\n    else if ('CSSSupportsRule' in window) {\n      // Build a condition string for every prefixed variant\n      var conditionText = [];\n      while (i--) {\n        conditionText.push('(' + domToCSS(props[i]) + ':' + value + ')');\n      }\n      conditionText = conditionText.join(' or ');\n      return injectElementWithStyles('@supports (' + conditionText + ') { #modernizr { position: absolute; } }', function(node) {\n        return computedStyle(node, null, 'position') === 'absolute';\n      });\n    }\n    return undefined;\n  }\n  ;\n\n  /**\n   * cssToDOM takes a kebab-case string and converts it to camelCase\n   * e.g. box-sizing -> boxSizing\n   *\n   * @access private\n   * @function cssToDOM\n   * @param {string} name - String name of kebab-case prop we want to convert\n   * @returns {string} The camelCase version of the supplied name\n   */\n  function cssToDOM(name) {\n    return name.replace(/([a-z])-([a-z])/g, function(str, m1, m2) {\n      return m1 + m2.toUpperCase();\n    }).replace(/^-/, '');\n  }\n\n  ;\n\n  // testProps is a generic CSS / DOM property test.\n\n  // In testing support for a given CSS property, it's legit to test:\n  //    `elem.style[styleName] !== undefined`\n  // If the property is supported it will return an empty string,\n  // if unsupported it will return undefined.\n\n  // We'll take advantage of this quick test and skip setting a style\n  // on our modernizr element, but instead just testing undefined vs\n  // empty string.\n\n  // Property names can be provided in either camelCase or kebab-case.\n\n  function testProps(props, prefixed, value, skipValueTest) {\n    skipValueTest = is(skipValueTest, 'undefined') ? false : skipValueTest;\n\n    // Try native detect first\n    if (!is(value, 'undefined')) {\n      var result = nativeTestProps(props, value);\n      if (!is(result, 'undefined')) {\n        return result;\n      }\n    }\n\n    // Otherwise do it properly\n    var afterInit, i, propsLength, prop, before;\n\n    // If we don't have a style element, that means we're running async or after\n    // the core tests, so we'll need to create our own elements to use.\n\n    // Inside of an SVG element, in certain browsers, the `style` element is only\n    // defined for valid tags. Therefore, if `modernizr` does not have one, we\n    // fall back to a less used element and hope for the best.\n    // For strict XHTML browsers the hardly used samp element is used.\n    var elems = ['modernizr', 'tspan', 'samp'];\n    while (!mStyle.style && elems.length) {\n      afterInit = true;\n      mStyle.modElem = createElement(elems.shift());\n      mStyle.style = mStyle.modElem.style;\n    }\n\n    // Delete the objects if we created them.\n    function cleanElems() {\n      if (afterInit) {\n        delete mStyle.style;\n        delete mStyle.modElem;\n      }\n    }\n\n    propsLength = props.length;\n    for (i = 0; i < propsLength; i++) {\n      prop = props[i];\n      before = mStyle.style[prop];\n\n      if (contains(prop, '-')) {\n        prop = cssToDOM(prop);\n      }\n\n      if (mStyle.style[prop] !== undefined) {\n\n        // If value to test has been passed in, do a set-and-check test.\n        // 0 (integer) is a valid property value, so check that `value` isn't\n        // undefined, rather than just checking it's truthy.\n        if (!skipValueTest && !is(value, 'undefined')) {\n\n          // Needs a try catch block because of old IE. This is slow, but will\n          // be avoided in most cases because `skipValueTest` will be used.\n          try {\n            mStyle.style[prop] = value;\n          } catch (e) {}\n\n          // If the property value has changed, we assume the value used is\n          // supported. If `value` is empty string, it'll fail here (because\n          // it hasn't changed), which matches how browsers have implemented\n          // CSS.supports()\n          if (mStyle.style[prop] !== before) {\n            cleanElems();\n            return prefixed === 'pfx' ? prop : true;\n          }\n        }\n        // Otherwise just return true, or the property name if this is a\n        // `prefixed()` call\n        else {\n          cleanElems();\n          return prefixed === 'pfx' ? prop : true;\n        }\n      }\n    }\n    cleanElems();\n    return false;\n  }\n\n  ;\n\n  /**\n   * testProp() investigates whether a given style property is recognized\n   * Property names can be provided in either camelCase or kebab-case.\n   *\n   * @memberOf Modernizr\n   * @name Modernizr.testProp\n   * @access public\n   * @optionName Modernizr.testProp()\n   * @optionProp testProp\n   * @function testProp\n   * @param {string} prop - Name of the CSS property to check\n   * @param {string} [value] - Name of the CSS value to check\n   * @param {boolean} [useValue] - Whether or not to check the value if @supports isn't supported\n   * @returns {boolean} an empty string if the property is supported, undefined if its unsupported\n   * @example\n   *\n   * Just like [testAllProps](#modernizr-testallprops), only it does not check any vendor prefixed\n   * version of the string.\n   *\n   * Note that the property name must be provided in camelCase (e.g. boxSizing not box-sizing)\n   *\n   * ```js\n   * Modernizr.testProp('pointerEvents')  // true\n   * ```\n   *\n   * You can also provide a value as an optional second argument to check if a\n   * specific value is supported\n   *\n   * ```js\n   * Modernizr.testProp('pointerEvents', 'none') // true\n   * Modernizr.testProp('pointerEvents', 'penguin') // false\n   * ```\n   */\n  var testProp = ModernizrProto.testProp = function(prop, value, useValue) {\n    return testProps([prop], undefined, value, useValue);\n  };\n\n  \n/*!\n{\n  \"name\": \"SVG\",\n  \"property\": \"svg\",\n  \"caniuse\": \"svg\",\n  \"tags\": [\"svg\"],\n  \"authors\": [\"Erik Dahlstrom\"],\n  \"polyfills\": [\n    \"svgweb\",\n    \"raphael\",\n    \"amplesdk\",\n    \"canvg\",\n    \"svg-boilerplate\",\n    \"sie\",\n    \"dojogfx\",\n    \"fabricjs\"\n  ]\n}\n!*/\n/* DOC\nDetects support for SVG in `<embed>` or `<object>` elements.\n*/\n\n  Modernizr.addTest('svg', !!document.createElementNS && !!document.createElementNS('http://www.w3.org/2000/svg', 'svg').createSVGRect);\n\n/*!\n{\n  \"name\": \"HTML5 Video\",\n  \"property\": \"video\",\n  \"caniuse\": \"video\",\n  \"tags\": [\"html5\", \"video\", \"media\"],\n  \"knownBugs\": [\"Without QuickTime, `Modernizr.video.h264` will be `undefined`; https://github.com/Modernizr/Modernizr/issues/546\"],\n  \"polyfills\": [\n    \"html5media\",\n    \"mediaelementjs\",\n    \"sublimevideo\",\n    \"videojs\",\n    \"leanbackplayer\",\n    \"videoforeverybody\"\n  ]\n}\n!*/\n/* DOC\nDetects support for the video element, as well as testing what types of content it supports.\n\nSubproperties are provided to describe support for `ogg`, `h264` and `webm` formats, e.g.:\n\n```javascript\nModernizr.video         // true\nModernizr.video.ogg     // 'probably'\n```\n*/\n\n  // Codec values from : github.com/NielsLeenheer/html5test/blob/9106a8/index.html#L845\n  //                     thx to NielsLeenheer and zcorpan\n\n  // Note: in some older browsers, \"no\" was a return value instead of empty string.\n  //   It was live in FF3.5.0 and 3.5.1, but fixed in 3.5.2\n  //   It was also live in Safari 4.0.0 - 4.0.4, but fixed in 4.0.5\n  (function() {\n    var elem = createElement('video');\n\n    Modernizr.addTest('video', function() {\n      var bool = false;\n      try {\n        bool = !!elem.canPlayType;\n        if (bool) {\n          bool = new Boolean(bool);\n        }\n      } catch (e) {}\n\n      return bool;\n    });\n\n    // IE9 Running on Windows Server SKU can cause an exception to be thrown, bug #224\n    try {\n      if (!!elem.canPlayType) {\n        Modernizr.addTest('video.ogg', elem.canPlayType('video/ogg; codecs=\"theora\"').replace(/^no$/, ''));\n\n        // Without QuickTime, this value will be `undefined`. github.com/Modernizr/Modernizr/issues/546\n        Modernizr.addTest('video.h264', elem.canPlayType('video/mp4; codecs=\"avc1.42E01E\"').replace(/^no$/, ''));\n        Modernizr.addTest('video.webm', elem.canPlayType('video/webm; codecs=\"vp8, vorbis\"').replace(/^no$/, ''));\n        Modernizr.addTest('video.vp9', elem.canPlayType('video/webm; codecs=\"vp9\"').replace(/^no$/, ''));\n        Modernizr.addTest('video.hls', elem.canPlayType('application/x-mpegURL; codecs=\"avc1.42E01E\"').replace(/^no$/, ''));\n      }\n    } catch (e) {}\n  })();\n\n\n  /**\n   * If the browsers follow the spec, then they would expose vendor-specific styles as:\n   *   elem.style.WebkitBorderRadius\n   * instead of something like the following (which is technically incorrect):\n   *   elem.style.webkitBorderRadius\n\n   * WebKit ghosts their properties in lowercase but Opera & Moz do not.\n   * Microsoft uses a lowercase `ms` instead of the correct `Ms` in IE8+\n   *   erik.eae.net/archives/2008/03/10/21.48.10/\n\n   * More here: github.com/Modernizr/Modernizr/issues/issue/21\n   *\n   * @access private\n   * @returns {string} The string representing the vendor-specific style properties\n   */\n  var omPrefixes = 'Moz O ms Webkit';\n  \n\n  var cssomPrefixes = (ModernizrProto._config.usePrefixes ? omPrefixes.split(' ') : []);\n  ModernizrProto._cssomPrefixes = cssomPrefixes;\n  \n\n  /**\n   * List of JavaScript DOM values used for tests\n   *\n   * @memberOf Modernizr\n   * @name Modernizr._domPrefixes\n   * @optionName Modernizr._domPrefixes\n   * @optionProp domPrefixes\n   * @access public\n   * @example\n   *\n   * Modernizr._domPrefixes is exactly the same as [_prefixes](#modernizr-_prefixes), but rather\n   * than kebab-case properties, all properties are their Capitalized variant\n   *\n   * ```js\n   * Modernizr._domPrefixes === [ \"Moz\", \"O\", \"ms\", \"Webkit\" ];\n   * ```\n   */\n  var domPrefixes = (ModernizrProto._config.usePrefixes ? omPrefixes.toLowerCase().split(' ') : []);\n  ModernizrProto._domPrefixes = domPrefixes;\n  \n\n  /**\n   * fnBind is a super small [bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind) polyfill.\n   *\n   * @access private\n   * @function fnBind\n   * @param {Function} fn - a function you want to change `this` reference to\n   * @param {Object} that - the `this` you want to call the function with\n   * @returns {Function} The wrapped version of the supplied function\n   */\n  function fnBind(fn, that) {\n    return function() {\n      return fn.apply(that, arguments);\n    };\n  }\n\n  ;\n\n  /**\n   * testDOMProps is a generic DOM property test; if a browser supports\n   *   a certain property, it won't return undefined for it.\n   *\n   * @access private\n   * @function testDOMProps\n   * @param {Array<string>} props - An array of properties to test for\n   * @param {Object} obj - An object or Element you want to use to test the parameters again\n   * @param {boolean|Object} elem - An Element to bind the property lookup again. Use `false` to prevent the check\n   * @returns {false|*} returns false if the prop is unsupported, otherwise the value that is supported\n   */\n  function testDOMProps(props, obj, elem) {\n    var item;\n\n    for (var i in props) {\n      if (props[i] in obj) {\n\n        // return the property name as a string\n        if (elem === false) {\n          return props[i];\n        }\n\n        item = obj[props[i]];\n\n        // let's bind a function\n        if (is(item, 'function')) {\n          // bind to obj unless overridden\n          return fnBind(item, elem || obj);\n        }\n\n        // return the unbound function or obj or value\n        return item;\n      }\n    }\n    return false;\n  }\n\n  ;\n\n  /**\n   * testPropsAll tests a list of DOM properties we want to check against.\n   * We specify literally ALL possible (known and/or likely) properties on\n   * the element including the non-vendor prefixed one, for forward-\n   * compatibility.\n   *\n   * @access private\n   * @function testPropsAll\n   * @param {string} prop - A string of the property to test for\n   * @param {string|Object} [prefixed] - An object to check the prefixed properties on. Use a string to skip\n   * @param {HTMLElement|SVGElement} [elem] - An element used to test the property and value against\n   * @param {string} [value] - A string of a css value\n   * @param {boolean} [skipValueTest] - An boolean representing if you want to test if value sticks when set\n   * @returns {false|string} returns the string version of the property, or false if it is unsupported\n   */\n  function testPropsAll(prop, prefixed, elem, value, skipValueTest) {\n\n    var ucProp = prop.charAt(0).toUpperCase() + prop.slice(1),\n      props = (prop + ' ' + cssomPrefixes.join(ucProp + ' ') + ucProp).split(' ');\n\n    // did they call .prefixed('boxSizing') or are we just testing a prop?\n    if (is(prefixed, 'string') || is(prefixed, 'undefined')) {\n      return testProps(props, prefixed, value, skipValueTest);\n\n      // otherwise, they called .prefixed('requestAnimationFrame', window[, elem])\n    } else {\n      props = (prop + ' ' + (domPrefixes).join(ucProp + ' ') + ucProp).split(' ');\n      return testDOMProps(props, prefixed, elem);\n    }\n  }\n\n  // Modernizr.testAllProps() investigates whether a given style property,\n  // or any of its vendor-prefixed variants, is recognized\n  //\n  // Note that the property names must be provided in the camelCase variant.\n  // Modernizr.testAllProps('boxSizing')\n  ModernizrProto.testAllProps = testPropsAll;\n\n  \n\n  /**\n   * testAllProps determines whether a given CSS property is supported in the browser\n   *\n   * @memberOf Modernizr\n   * @name Modernizr.testAllProps\n   * @optionName Modernizr.testAllProps()\n   * @optionProp testAllProps\n   * @access public\n   * @function testAllProps\n   * @param {string} prop - String naming the property to test (either camelCase or kebab-case)\n   * @param {string} [value] - String of the value to test\n   * @param {boolean} [skipValueTest=false] - Whether to skip testing that the value is supported when using non-native detection\n   * @returns {false|string} returns the string version of the property, or false if it is unsupported\n   * @example\n   *\n   * testAllProps determines whether a given CSS property, in some prefixed form,\n   * is supported by the browser.\n   *\n   * ```js\n   * testAllProps('boxSizing')  // true\n   * ```\n   *\n   * It can optionally be given a CSS value in string form to test if a property\n   * value is valid\n   *\n   * ```js\n   * testAllProps('display', 'block') // true\n   * testAllProps('display', 'penguin') // false\n   * ```\n   *\n   * A boolean can be passed as a third parameter to skip the value check when\n   * native detection (@supports) isn't available.\n   *\n   * ```js\n   * testAllProps('shapeOutside', 'content-box', true);\n   * ```\n   */\n  function testAllProps(prop, value, skipValueTest) {\n    return testPropsAll(prop, undefined, undefined, value, skipValueTest);\n  }\n\n  ModernizrProto.testAllProps = testAllProps;\n\n  \n/*!\n{\n  \"name\": \"CSS Animations\",\n  \"property\": \"cssanimations\",\n  \"caniuse\": \"css-animation\",\n  \"polyfills\": [\"transformie\", \"csssandpaper\"],\n  \"tags\": [\"css\"],\n  \"warnings\": [\"Android < 4 will pass this test, but can only animate a single property at a time\"],\n  \"notes\": [{\n    \"name\": \"Article: 'Dispelling the Android CSS animation myths'\",\n    \"href\": \"https://web.archive.org/web/20180602074607/https://daneden.me/2011/12/14/putting-up-with-androids-bullshit/\"\n  }]\n}\n!*/\n/* DOC\nDetects whether or not elements can be animated using CSS\n*/\n\n  Modernizr.addTest('cssanimations', testAllProps('animationName', 'a', true));\n\n\n  /**\n   * testStyles injects an element with style element and some CSS rules\n   *\n   * @memberOf Modernizr\n   * @name Modernizr.testStyles\n   * @optionName Modernizr.testStyles()\n   * @optionProp testStyles\n   * @access public\n   * @function testStyles\n   * @param {string} rule - String representing a css rule\n   * @param {function} callback - A function that is used to test the injected element\n   * @param {number} [nodes] - An integer representing the number of additional nodes you want injected\n   * @param {string[]} [testnames] - An array of strings that are used as ids for the additional nodes\n   * @returns {boolean}\n   * @example\n   *\n   * `Modernizr.testStyles` takes a CSS rule and injects it onto the current page\n   * along with (possibly multiple) DOM elements. This lets you check for features\n   * that can not be detected by simply checking the [IDL](https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Interface_development_guide/IDL_interface_rules).\n   *\n   * ```js\n   * Modernizr.testStyles('#modernizr { width: 9px; color: papayawhip; }', function(elem, rule) {\n   *   // elem is the first DOM node in the page (by default #modernizr)\n   *   // rule is the first argument you supplied - the CSS rule in string form\n   *\n   *   addTest('widthworks', elem.style.width === '9px')\n   * });\n   * ```\n   *\n   * If your test requires multiple nodes, you can include a third argument\n   * indicating how many additional div elements to include on the page. The\n   * additional nodes are injected as children of the `elem` that is returned as\n   * the first argument to the callback.\n   *\n   * ```js\n   * Modernizr.testStyles('#modernizr {width: 1px}; #modernizr2 {width: 2px}', function(elem) {\n   *   document.getElementById('modernizr').style.width === '1px'; // true\n   *   document.getElementById('modernizr2').style.width === '2px'; // true\n   *   elem.firstChild === document.getElementById('modernizr2'); // true\n   * }, 1);\n   * ```\n   *\n   * By default, all of the additional elements have an ID of `modernizr[n]`, where\n   * `n` is its index (e.g. the first additional, second overall is `#modernizr2`,\n   * the second additional is `#modernizr3`, etc.).\n   * If you want to have more meaningful IDs for your function, you can provide\n   * them as the fourth argument, as an array of strings\n   *\n   * ```js\n   * Modernizr.testStyles('#foo {width: 10px}; #bar {height: 20px}', function(elem) {\n   *   elem.firstChild === document.getElementById('foo'); // true\n   *   elem.lastChild === document.getElementById('bar'); // true\n   * }, 2, ['foo', 'bar']);\n   * ```\n   */\n  var testStyles = ModernizrProto.testStyles = injectElementWithStyles;\n  \n/*!\n{\n  \"name\": \"details Element\",\n  \"caniuse\": \"details\",\n  \"property\": \"details\",\n  \"tags\": [\"elem\"],\n  \"builderAliases\": [\"elem_details\"],\n  \"authors\": [\"@mathias\"],\n  \"notes\": [{\n    \"name\": \"Mathias' Original\",\n    \"href\": \"https://mathiasbynens.be/notes/html5-details-jquery#comment-35\"\n  }]\n}\n!*/\n\n  Modernizr.addTest('details', function() {\n    var el = createElement('details');\n    var diff;\n\n    // return early if possible; thanks @aFarkas!\n    if (!('open' in el)) {\n      return false;\n    }\n\n    testStyles('#modernizr details{display:block}', function(node) {\n      node.appendChild(el);\n      el.innerHTML = '<summary>a</summary>b';\n      diff = el.offsetHeight;\n      el.open = true;\n      diff = diff !== el.offsetHeight;\n    });\n\n    return diff;\n  });\n\n\n  // Run each test\n  testRunner();\n\n  // Remove the \"no-js\" class if it exists\n  setClasses(classes);\n\n  delete ModernizrProto.addTest;\n  delete ModernizrProto.addAsyncTest;\n\n  // Run the things that are supposed to run after the tests\n  for (var i = 0; i < Modernizr._q.length; i++) {\n    Modernizr._q[i]();\n  }\n\n  // Leak Modernizr namespace\n  window.Modernizr = Modernizr;\n\n\n;\n\n})(window, document);\n"],"sourceRoot":"/source/"}